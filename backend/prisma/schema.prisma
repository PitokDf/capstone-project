// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  username  String   @unique @db.VarChar(125)
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Class {
  id         Int        @id @default(autoincrement())
  code       String     @unique
  name       String?
  createedAt DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  schedules  Schedule[]
}

model Course {
  id         Int      @id @default(autoincrement())
  code       String   @unique
  name       String   @db.VarChar(125)
  sks        Int
  duration   Int
  lectureID  Int
  createedAt DateTime @default(now())
  updatedAt  DateTime @updatedAt

  lecture        Lecture         @relation(fields: [lectureID], references: [id], onDelete: Cascade)
  Schedules      Schedule[]
  courseLectures CourseLecture[]
}

model Lecture {
  id         Int      @id @default(autoincrement())
  nip        String   @unique
  name       String
  preference String?
  createedAt DateTime @default(now())
  updatedAt  DateTime @updatedAt

  prefrredSlots LectureTimePrefrence[]
  courseLecture CourseLecture[]
  courses       Course[]
  Schedule      Schedule[]
}

model CourseLecture {
  id        Int      @id @default(autoincrement())
  courseID  Int
  lectureID Int
  createdAt DateTime @default(now())

  course  Course  @relation(fields: [courseID], references: [id], onDelete: Cascade)
  lecture Lecture @relation(fields: [lectureID], references: [id], onDelete: Cascade)

  @@unique([courseID, lectureID])
}

model LectureTimePrefrence {
  id         Int      @id @default(autoincrement())
  lectureID  Int
  timeslotID Int
  createedAt DateTime @default(now())
  updatedAt  DateTime @updatedAt

  lecture  Lecture  @relation(fields: [lectureID], references: [id], onDelete: Cascade)
  timeslot TimeSlot @relation(fields: [timeslotID], references: [id], onDelete: Cascade)

  @@unique([lectureID, timeslotID])
}

model Room {
  id         Int      @id @default(autoincrement())
  code       String   @unique
  name       String   @default("~")
  capacity   String
  location   String
  createedAt DateTime @default(now())
  updatedAt  DateTime @updatedAt

  Schedule Schedule[]
}

model TimeSlot {
  id         Int      @id @default(autoincrement())
  day        String
  starTime   DateTime
  endTime    DateTime
  createedAt DateTime @default(now())
  updatedAt  DateTime @updatedAt

  lecturePrefrences LectureTimePrefrence[]
  Schedule          Schedule[]
}

model Schedule {
  id         Int      @id @default(autoincrement())
  classID    Int
  courseID   Int
  lectureID  Int
  roomID     Int
  timeSlotID Int
  createedAt DateTime @default(now())
  updatedAt  DateTime @updatedAt

  class    Class    @relation(fields: [classID], references: [id], onDelete: Cascade)
  course   Course   @relation(fields: [courseID], references: [id], onDelete: Cascade)
  lecture  Lecture  @relation(fields: [lectureID], references: [id], onDelete: Cascade)
  room     Room     @relation(fields: [roomID], references: [id], onDelete: Cascade)
  timeSlot TimeSlot @relation(fields: [timeSlotID], references: [id], onDelete: Cascade)

  @@unique([classID, timeSlotID])
  @@unique([roomID, timeSlotID])
  @@unique([lectureID, timeSlotID])
}
